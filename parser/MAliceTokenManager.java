/* Generated By:JavaCC: Do not edit this line. MAliceTokenManager.java */
package parser;

import java.util.LinkedList;
import ast.*;
import ast.basic.*;
import ast.expressions.*;
import ast.functions.*;
import ast.statements.*;

/** Token Manager. */
public class MAliceTokenManager implements MAliceConstants {

   /** Debug output. */
   public static java.io.PrintStream debugStream = System.out;

   /** Set debug output. */
   public static void setDebugStream(java.io.PrintStream ds) {
      debugStream = ds;
   }

   private static final int jjStopStringLiteralDfa_0(int pos, long active0) {
      switch (pos) {
      case 0:
         if ((active0 & 0x37fff8afff00L) != 0L) {
            jjmatchedKind = 63;
            return 40;
         }
         if ((active0 & 0x400000L) != 0L)
            return 5;
         return -1;
      case 1:
         if ((active0 & 0x400000L) != 0L)
            return 6;
         if ((active0 & 0x373ff8afff00L) != 0L) {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
            return 40;
         }
         if ((active0 & 0xc000000000L) != 0L)
            return 40;
         return -1;
      case 2:
         if ((active0 & 0x173ff8abfc00L) != 0L) {
            jjmatchedKind = 63;
            jjmatchedPos = 2;
            return 40;
         }
         if ((active0 & 0x200000040300L) != 0L)
            return 40;
         return -1;
      case 3:
         if ((active0 & 0x50000800L) != 0L) {
            if (jjmatchedPos < 2) {
               jjmatchedKind = 63;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x400L) != 0L)
            return 40;
         if ((active0 & 0x173fa8abf000L) != 0L) {
            jjmatchedKind = 63;
            jjmatchedPos = 3;
            return 40;
         }
         return -1;
      case 4:
         if ((active0 & 0x23ea808f000L) != 0L) {
            jjmatchedKind = 63;
            jjmatchedPos = 4;
            return 40;
         }
         if ((active0 & 0x100220000L) != 0L) {
            if (jjmatchedPos < 3) {
               jjmatchedKind = 63;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x50000800L) != 0L) {
            if (jjmatchedPos < 2) {
               jjmatchedKind = 63;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x150000810000L) != 0L)
            return 40;
         return -1;
      case 5:
         if ((active0 & 0x2ea0000000L) != 0L) {
            jjmatchedKind = 63;
            jjmatchedPos = 5;
            return 40;
         }
         if ((active0 & 0x50000000L) != 0L) {
            if (jjmatchedPos < 2) {
               jjmatchedKind = 63;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x20008000000L) != 0L) {
            if (jjmatchedPos < 4) {
               jjmatchedKind = 63;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x100220000L) != 0L) {
            if (jjmatchedPos < 3) {
               jjmatchedKind = 63;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x100008f000L) != 0L)
            return 40;
         return -1;
      case 6:
         if ((active0 & 0x800000000L) != 0L) {
            if (jjmatchedPos < 5) {
               jjmatchedKind = 63;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x50000000L) != 0L) {
            if (jjmatchedPos < 2) {
               jjmatchedKind = 63;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x20008000000L) != 0L) {
            if (jjmatchedPos < 4) {
               jjmatchedKind = 63;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x100220000L) != 0L) {
            if (jjmatchedPos < 3) {
               jjmatchedKind = 63;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x2400000000L) != 0L)
            return 40;
         if ((active0 & 0x2a0000000L) != 0L) {
            jjmatchedKind = 63;
            jjmatchedPos = 6;
            return 40;
         }
         return -1;
      case 7:
         if ((active0 & 0x220000000L) != 0L) {
            jjmatchedKind = 63;
            jjmatchedPos = 7;
            return 40;
         }
         if ((active0 & 0x800000000L) != 0L) {
            if (jjmatchedPos < 5) {
               jjmatchedKind = 63;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L) {
            if (jjmatchedPos < 6) {
               jjmatchedKind = 63;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x50000000L) != 0L) {
            if (jjmatchedPos < 2) {
               jjmatchedKind = 63;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x20008000000L) != 0L) {
            if (jjmatchedPos < 4) {
               jjmatchedKind = 63;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x100220000L) != 0L) {
            if (jjmatchedPos < 3) {
               jjmatchedKind = 63;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x220000000L) != 0L) {
            jjmatchedKind = 63;
            jjmatchedPos = 8;
            return 40;
         }
         if ((active0 & 0x800000000L) != 0L) {
            if (jjmatchedPos < 5) {
               jjmatchedKind = 63;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x80000000L) != 0L) {
            if (jjmatchedPos < 6) {
               jjmatchedKind = 63;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x40000000L) != 0L) {
            if (jjmatchedPos < 2) {
               jjmatchedKind = 63;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x20008000000L) != 0L) {
            if (jjmatchedPos < 4) {
               jjmatchedKind = 63;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x100200000L) != 0L) {
            if (jjmatchedPos < 3) {
               jjmatchedKind = 63;
               jjmatchedPos = 3;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x20000000L) != 0L) {
            if (jjmatchedPos < 8) {
               jjmatchedKind = 63;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L) {
            if (jjmatchedPos < 5) {
               jjmatchedKind = 63;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x40000000L) != 0L) {
            if (jjmatchedPos < 2) {
               jjmatchedKind = 63;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x20008000000L) != 0L) {
            if (jjmatchedPos < 4) {
               jjmatchedKind = 63;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x100200000L) != 0L) {
            if (jjmatchedPos < 3) {
               jjmatchedKind = 63;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x200000000L) != 0L)
            return 40;
         return -1;
      case 10:
         if ((active0 & 0x20000000L) != 0L) {
            if (jjmatchedPos < 8) {
               jjmatchedKind = 63;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L) {
            if (jjmatchedPos < 5) {
               jjmatchedKind = 63;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x100000000L) != 0L) {
            if (jjmatchedPos < 3) {
               jjmatchedKind = 63;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x40000000L) != 0L) {
            if (jjmatchedPos < 2) {
               jjmatchedKind = 63;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x20008000000L) != 0L) {
            if (jjmatchedPos < 4) {
               jjmatchedKind = 63;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x20000000000L) != 0L) {
            if (jjmatchedPos < 4) {
               jjmatchedKind = 63;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800000000L) != 0L) {
            if (jjmatchedPos < 5) {
               jjmatchedKind = 63;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x100000000L) != 0L) {
            if (jjmatchedPos < 3) {
               jjmatchedKind = 63;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x40000000L) != 0L) {
            if (jjmatchedPos < 2) {
               jjmatchedKind = 63;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x20000000000L) != 0L) {
            if (jjmatchedPos < 4) {
               jjmatchedKind = 63;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x40000000L) != 0L) {
            if (jjmatchedPos < 2) {
               jjmatchedKind = 63;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x20000000000L) != 0L) {
            if (jjmatchedPos < 4) {
               jjmatchedKind = 63;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x40000000L) != 0L) {
            if (jjmatchedPos < 2) {
               jjmatchedKind = 63;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x20000000000L) != 0L) {
            if (jjmatchedPos < 4) {
               jjmatchedKind = 63;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x40000000L) != 0L) {
            if (jjmatchedPos < 2) {
               jjmatchedKind = 63;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x20000000000L) != 0L) {
            if (jjmatchedPos < 4) {
               jjmatchedKind = 63;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x40000000L) != 0L) {
            if (jjmatchedPos < 2) {
               jjmatchedKind = 63;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      default:
         return -1;
      }
   }

   private static final int jjStartNfa_0(int pos, long active0) {
      return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
   }

   static private int jjStopAtPos(int pos, int kind) {
      jjmatchedKind = kind;
      jjmatchedPos = pos;
      return pos + 1;
   }

   static private int jjMoveStringLiteralDfa0_0() {
      switch (curChar) {
      case 33:
         jjmatchedKind = 26;
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L);
      case 37:
         return jjStopAtPos(0, 52);
      case 38:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x400000000000L);
      case 39:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 40:
         return jjStopAtPos(0, 24);
      case 41:
         return jjStopAtPos(0, 25);
      case 42:
         return jjStopAtPos(0, 50);
      case 43:
         return jjStopAtPos(0, 48);
      case 44:
         return jjStopAtPos(0, 6);
      case 45:
         return jjStopAtPos(0, 49);
      case 46:
         return jjStopAtPos(0, 7);
      case 47:
         return jjStopAtPos(0, 51);
      case 60:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0x800000000000000L);
      case 61:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L);
      case 62:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0x200000000000000L);
      case 63:
         return jjStopAtPos(0, 20);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x20008000000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x50000000L);
      case 94:
         return jjStopAtPos(0, 54);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x200000000100L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x400001200L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xa0000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1a00000000L);
      case 104:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x2000800000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x4000298000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x40100020800L);
      case 124:
         jjmatchedKind = 55;
         return jjMoveStringLiteralDfa1_0(0x800000000000L);
      case 126:
         return jjStopAtPos(0, 43);
      default:
         return jjMoveNfa_0(0, 0);
      }
   }

   static private int jjMoveStringLiteralDfa1_0(long active0) {
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(0, active0);
         return 1;
      }
      switch (curChar) {
      case 38:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         break;
      case 61:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000240800L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2500005000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x400d0020400L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000800000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x20008000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000100L);
      case 111:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 38, 40);
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x90000L);
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 39, 40);
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L);
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(1, 22, 6);
         break;
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000008000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2200L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L);
      case 124:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         break;
      default:
         break;
      }
      return jjStartNfa_0(0, active0);
   }

   static private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(0, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(1, active0);
         return 2;
      }
      switch (curChar) {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100080020000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x400001000L);
      case 100:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 40);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 40);
         break;
      case 101:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0x250800400L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x60008280000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x120000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x800010000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000008000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 40);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000004000L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      default:
         break;
      }
      return jjStartNfa_0(1, active0);
   }

   static private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(1, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(2, active0);
         return 3;
      }
      switch (curChar) {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x50000800L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x400001000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000002000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x60008800000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x280000L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x3000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 40);
         return jjMoveStringLiteralDfa4_0(active0, 0x100280000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x120024000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      default:
         break;
      }
      return jjStartNfa_0(2, active0);
   }

   static private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(2, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(3, active0);
         return 4;
      }
      switch (curChar) {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x100220000L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 97:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(4, 11);
         return jjMoveStringLiteralDfa5_0(active0, 0x2020000000L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 40);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 40);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x21008086000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x880000000L);
      case 104:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 40);
         break;
      case 107:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 40);
         break;
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      default:
         break;
      }
      return jjStartNfa_0(3, active0);
   }

   static private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(3, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(4, active0);
         return 5;
      }
      switch (curChar) {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0x20008000000L);
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 40);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
      case 103:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 40);
         break;
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x50000000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      case 114:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 13, 40);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 40);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 40);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 40);
         break;
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      default:
         break;
      }
      return jjStartNfa_0(4, active0);
   }

   static private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(4, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(5, active0);
         return 6;
      }
      switch (curChar) {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x200020000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 40);
         break;
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x50000000L);
      case 115:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 40);
         break;
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L);
      default:
         break;
      }
      return jjStartNfa_0(5, active0);
   }

   static private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(5, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(6, active0);
         return 7;
      }
      switch (curChar) {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      case 107:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L);
      case 109:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(7, 28);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L);
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(7, 17);
         break;
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
      default:
         break;
      }
      return jjStartNfa_0(6, active0);
   }

   static private int jjMoveStringLiteralDfa8_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(6, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(7, active0);
         return 8;
      }
      switch (curChar) {
      case 97:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(8, 31);
         break;
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x840000000L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      default:
         break;
      }
      return jjStartNfa_0(7, active0);
   }

   static private int jjMoveStringLiteralDfa9_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(7, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(8, active0);
         return 9;
      }
      switch (curChar) {
      case 32:
         return jjMoveStringLiteralDfa10_0(active0, 0x20020000000L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(9, 21);
         break;
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x48000000L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000L);
      case 121:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(9, 33, 40);
         break;
      default:
         break;
      }
      return jjStartNfa_0(8, active0);
   }

   static private int jjMoveStringLiteralDfa10_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(8, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(9, active0);
         return 10;
      }
      switch (curChar) {
      case 97:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(10, 29);
         break;
      case 100:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(10, 27);
         break;
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L);
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0x140000000L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000000L);
      default:
         break;
      }
      return jjStartNfa_0(9, active0);
   }

   static private int jjMoveStringLiteralDfa11_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(9, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(10, active0);
         return 11;
      }
      switch (curChar) {
      case 45:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000L);
      case 104:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(11, 32);
         break;
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000000L);
      case 115:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(11, 35);
         break;
      default:
         break;
      }
      return jjStartNfa_0(10, active0);
   }

   static private int jjMoveStringLiteralDfa12_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(10, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(11, active0);
         return 12;
      }
      switch (curChar) {
      case 71:
         return jjMoveStringLiteralDfa13_0(active0, 0x40000000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000L);
      default:
         break;
      }
      return jjStartNfa_0(11, active0);
   }

   static private int jjMoveStringLiteralDfa13_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(11, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(12, active0);
         return 13;
      }
      switch (curChar) {
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000L);
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000000L);
      default:
         break;
      }
      return jjStartNfa_0(12, active0);
   }

   static private int jjMoveStringLiteralDfa14_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(12, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(13, active0);
         return 14;
      }
      switch (curChar) {
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x40000000L);
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000000000L);
      default:
         break;
      }
      return jjStartNfa_0(13, active0);
   }

   static private int jjMoveStringLiteralDfa15_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(13, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(14, active0);
         return 15;
      }
      switch (curChar) {
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(15, 41);
         break;
      case 115:
         return jjMoveStringLiteralDfa16_0(active0, 0x40000000L);
      default:
         break;
      }
      return jjStartNfa_0(14, active0);
   }

   static private int jjMoveStringLiteralDfa16_0(long old0, long active0) {
      if (((active0 &= old0)) == 0L)
         return jjStartNfa_0(14, old0);
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         jjStopStringLiteralDfa_0(15, active0);
         return 16;
      }
      switch (curChar) {
      case 115:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(16, 30);
         break;
      default:
         break;
      }
      return jjStartNfa_0(15, active0);
   }

   static private int jjStartNfaWithStates_0(int pos, int kind, int state) {
      jjmatchedKind = kind;
      jjmatchedPos = pos;
      try {
         curChar = input_stream.readChar();
      } catch (java.io.IOException e) {
         return pos + 1;
      }
      return jjMoveNfa_0(state, pos + 1);
   }

   static final long[] jjbitVec0 = { 0x0L, 0x0L, 0xffffffffffffffffL,
         0xffffffffffffffffL };

   static private int jjMoveNfa_0(int startState, int curPos) {
      int startsAt = 0;
      jjnewStateCnt = 41;
      int i = 1;
      jjstateSet[0] = startState;
      int kind = 0x7fffffff;
      for (;;) {
         if (++jjround == 0x7fffffff)
            ReInitRounds();
         if (curChar < 64) {
            long l = 1L << curChar;
            do {
               switch (jjstateSet[--i]) {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L) {
                     if (kind > 65)
                        kind = 65;
                  } else if (curChar == 34)
                     jjCheckNAddStates(0, 5);
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 5;
                  if ((0x3fe000000000000L & l) != 0L) {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(2);
                  } else if (curChar == 48) {
                     if (kind > 62)
                        kind = 62;
                  }
                  break;
               case 1:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L && kind > 65)
                     kind = 65;
                  break;
               case 4:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 6:
                  if (curChar == 39 && kind > 66)
                     kind = 66;
                  break;
               case 7:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 5);
                  break;
               case 8:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 10:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 11:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 12:
                  if (curChar == 46 && kind > 5)
                     kind = 5;
                  break;
               case 18:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 26:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(9, 12);
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 29:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 31:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 33:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 34:
                  if (curChar == 34 && kind > 67)
                     kind = 67;
                  break;
               case 35:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(16, 19);
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 37:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjstateSet[jjnewStateCnt++] = 40;
                  break;
               default:
                  break;
               }
            } while (i != startsAt);
         } else if (curChar < 128) {
            long l = 1L << (curChar & 077);
            do {
               switch (jjstateSet[--i]) {
               case 0:
               case 40:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(40);
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 9:
                  if (curChar == 92)
                     jjAddStates(20, 22);
                  break;
               case 10:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 13:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 19:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 31:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 32:
                  if (curChar == 92)
                     jjAddStates(23, 25);
                  break;
               case 33:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               default:
                  break;
               }
            } while (i != startsAt);
         } else {
            int i2 = (curChar & 0xff) >> 6;
            long l2 = 1L << (curChar & 077);
            do {
               switch (jjstateSet[--i]) {
               case 8:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(6, 8);
                  break;
               case 31:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(13, 15);
                  break;
               default:
                  break;
               }
            } while (i != startsAt);
         }
         if (kind != 0x7fffffff) {
            jjmatchedKind = kind;
            jjmatchedPos = curPos;
            kind = 0x7fffffff;
         }
         ++curPos;
         if ((i = jjnewStateCnt) == (startsAt = 41 - (jjnewStateCnt = startsAt)))
            return curPos;
         try {
            curChar = input_stream.readChar();
         } catch (java.io.IOException e) {
            return curPos;
         }
      }
   }

   static final int[] jjnextStates = { 8, 9, 11, 31, 32, 34, 8, 9, 11, 8, 9,
         28, 11, 31, 32, 34, 31, 32, 36, 34, 10, 27, 29, 33, 35, 37, };

   /** Token literal values. */
   public static final String[] jjstrLiteralImages = { "", null, null, null,
         null, null, "\54", "\56", "\141\156\144", "\142\165\164",
         "\164\150\145\156", "\167\141\163\40\141", "\142\145\143\141\155\145",
         "\156\165\155\142\145\162", "\154\145\164\164\145\162",
         "\163\164\162\151\156\147", "\163\160\157\153\145",
         "\167\150\141\164\40\167\141\163", "\150\141\144",
         "\163\160\151\144\145\162", "\77",
         "\163\141\151\144\40\101\154\151\143\145", "\47\163",
         "\160\151\145\143\145", "\50", "\51", "\41",
         "\101\154\151\143\145\40\146\157\165\156\144",
         "\124\150\145\40\162\157\157\155",
         "\143\157\156\164\141\151\156\145\144\40\141",
         "\124\150\145\40\114\157\157\153\151\156\147\55\107\154\141\163\163",
         "\143\150\141\156\147\145\144\40\141",
         "\167\145\156\164\40\164\150\162\157\165\147\150",
         "\145\166\145\156\164\165\141\154\154\171",
         "\142\145\143\141\165\163\145",
         "\145\156\157\165\147\150\40\164\151\155\145\163",
         "\145\151\164\150\145\162", "\160\145\162\150\141\160\163",
         "\163\157", "\157\162", "\155\141\171\142\145",
         "\101\154\151\143\145\40\167\141\163\40\165\156\163\165\162\145",
         "\167\150\151\143\150", "\176", "\144\162\141\156\153",
         "\141\164\145", "\46\46", "\174\174", "\53", "\55", "\52", "\57",
         "\45", "\46", "\136", "\174", "\76", "\76\75", "\74", "\74\75",
         "\75\75", "\41\75", null, null, null, null, null, null, };

   /** Lexer state names. */
   public static final String[] lexStateNames = { "DEFAULT", };
   static final long[] jjtoToken = { 0xffffffffffffffc1L, 0xfL, };
   static final long[] jjtoSkip = { 0x3eL, 0x0L, };
   static final long[] jjtoSpecial = { 0x20L, 0x0L, };
   static protected SimpleCharStream input_stream;
   static private final int[] jjrounds = new int[41];
   static private final int[] jjstateSet = new int[82];
   static protected char curChar;

   /** Constructor. */
   public MAliceTokenManager(SimpleCharStream stream) {
      if (input_stream != null)
         throw new TokenMgrError(
               "ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.",
               TokenMgrError.STATIC_LEXER_ERROR);
      input_stream = stream;
   }

   /** Constructor. */
   public MAliceTokenManager(SimpleCharStream stream, int lexState) {
      this(stream);
      SwitchTo(lexState);
   }

   /** Reinitialise parser. */
   static public void ReInit(SimpleCharStream stream) {
      jjmatchedPos = jjnewStateCnt = 0;
      curLexState = defaultLexState;
      input_stream = stream;
      ReInitRounds();
   }

   static private void ReInitRounds() {
      int i;
      jjround = 0x80000001;
      for (i = 41; i-- > 0;)
         jjrounds[i] = 0x80000000;
   }

   /** Reinitialise parser. */
   static public void ReInit(SimpleCharStream stream, int lexState) {
      ReInit(stream);
      SwitchTo(lexState);
   }

   /** Switch to specified lex state. */
   static public void SwitchTo(int lexState) {
      if (lexState >= 1 || lexState < 0)
         throw new TokenMgrError("Error: Ignoring invalid lexical state : "
               + lexState + ". State unchanged.",
               TokenMgrError.INVALID_LEXICAL_STATE);
      else
         curLexState = lexState;
   }

   static protected Token jjFillToken() {
      final Token t;
      final String curTokenImage;
      final int beginLine;
      final int endLine;
      final int beginColumn;
      final int endColumn;
      String im = jjstrLiteralImages[jjmatchedKind];
      curTokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
      t = Token.newToken(jjmatchedKind, curTokenImage);

      t.beginLine = beginLine;
      t.endLine = endLine;
      t.beginColumn = beginColumn;
      t.endColumn = endColumn;

      return t;
   }

   static int curLexState = 0;
   static int defaultLexState = 0;
   static int jjnewStateCnt;
   static int jjround;
   static int jjmatchedPos;
   static int jjmatchedKind;

   /** Get the next Token. */
   public static Token getNextToken() {
      Token specialToken = null;
      Token matchedToken;
      int curPos = 0;

      EOFLoop: for (;;) {
         try {
            curChar = input_stream.BeginToken();
         } catch (java.io.IOException e) {
            jjmatchedKind = 0;
            matchedToken = jjFillToken();
            matchedToken.specialToken = specialToken;
            return matchedToken;
         }

         try {
            input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         } catch (java.io.IOException e1) {
            continue EOFLoop;
         }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedKind != 0x7fffffff) {
            if (jjmatchedPos + 1 < curPos)
               input_stream.backup(curPos - jjmatchedPos - 1);
            if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
               matchedToken = jjFillToken();
               matchedToken.specialToken = specialToken;
               return matchedToken;
            } else {
               if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                  matchedToken = jjFillToken();
                  if (specialToken == null)
                     specialToken = matchedToken;
                  else {
                     matchedToken.specialToken = specialToken;
                     specialToken = (specialToken.next = matchedToken);
                  }
               }
               continue EOFLoop;
            }
         }
         int error_line = input_stream.getEndLine();
         int error_column = input_stream.getEndColumn();
         String error_after = null;
         boolean EOFSeen = false;
         try {
            input_stream.readChar();
            input_stream.backup(1);
         } catch (java.io.IOException e1) {
            EOFSeen = true;
            error_after = curPos <= 1 ? "" : input_stream.GetImage();
            if (curChar == '\n' || curChar == '\r') {
               error_line++;
               error_column = 0;
            } else
               error_column++;
         }
         if (!EOFSeen) {
            input_stream.backup(1);
            error_after = curPos <= 1 ? "" : input_stream.GetImage();
         }
         throw new TokenMgrError(EOFSeen, curLexState, error_line,
               error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
      }
   }

   static private void jjCheckNAdd(int state) {
      if (jjrounds[state] != jjround) {
         jjstateSet[jjnewStateCnt++] = state;
         jjrounds[state] = jjround;
      }
   }

   static private void jjAddStates(int start, int end) {
      do {
         jjstateSet[jjnewStateCnt++] = jjnextStates[start];
      } while (start++ != end);
   }

   static private void jjCheckNAddTwoStates(int state1, int state2) {
      jjCheckNAdd(state1);
      jjCheckNAdd(state2);
   }

   static private void jjCheckNAddStates(int start, int end) {
      do {
         jjCheckNAdd(jjnextStates[start]);
      } while (start++ != end);
   }

}
